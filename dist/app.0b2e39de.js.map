{"version":3,"sources":["static/app.js"],"names":["RANDOM_CONTENT_URL","wordsElement","document","getElementById","timerElement","getDomElement","selector","querySelector","fetchContent","url","sendData","xhttp","XMLHttpRequest","onload","data","responseText","open","send","updateWords","split","forEach","word","spanElement","createElement","innerText","appendChild","classList","add","calculateTypingResults","cTCharacter","metaData","correctTypedWords","join","length","iTCharacter","misspelledWords","iTWord","cTWord","totalCharactersTyped","showResults","Math","floor","toFixed","speed","acr","cCharacters","cWords","iCharacters","iWords","clear","getNextWordIndex","nextElementSibling","offsetLeft","getCurrentWord","index","currentWord","querySelectorAll","bringNewLine","transformTop","style","getPropertyValue","slice","setProperty","Number","TypeCheck","timerUpdate","setInterval","timerTime","clearInterval","clearAll","timerRunning","updateTimer","e","wordIndex","currentWordText","key","remove","input","value","push","inputFieldElementTypedValue","trim","removeAttribute","focus","btn","addEventListener","keyUp","keyPress","runTimer","refresh","setAttribute"],"mappings":"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","file":"app.0b2e39de.js","sourceRoot":"..\\src","sourcesContent":["const RANDOM_CONTENT_URL = \"http://metaphorpsum.com/paragraphs/1/10\";\r\nconst wordsElement = document.getElementById(\"words\");\r\nconst timerElement = document.getElementById(\"timer\");\r\nimport \"./style.css\";\r\n\r\nfunction getDomElement(selector) {\r\n  return document.querySelector(selector);\r\n}\r\n// GETTING DATA FROM API\r\nfunction fetchContent(url, sendData) {\r\n  const xhttp = new XMLHttpRequest();\r\n  xhttp.onload = function () {\r\n    const data = this.responseText;\r\n    sendData(data);\r\n  };\r\n  xhttp.open(\"GET\", RANDOM_CONTENT_URL);\r\n  xhttp.send();\r\n}\r\n\r\n// UPDATE CONTENT OF Content Element\r\nfunction updateWords(data) {\r\n  const words = data.split(\" \");\r\n  words.forEach((word) => {\r\n    const spanElement = document.createElement(\"span\");\r\n    spanElement.innerText = word;\r\n    wordsElement.appendChild(spanElement);\r\n  });\r\n  // Highlighting first word\r\n  wordsElement.querySelector(\"span\").classList.add(\"highlight\");\r\n}\r\n\r\n// CALLING FETCH CONTENT TO UPDATE DATA\r\nfetchContent(RANDOM_CONTENT_URL, updateWords);\r\n\r\n// Calculate RESULTS AND GIVING THE DATA TO showResults\r\nfunction calculateTypingResults() {\r\n  const cTCharacter = metaData.correctTypedWords.join(\"\").length;\r\n  const iTCharacter = metaData.misspelledWords.join(\"\").length;\r\n  const iTWord = metaData.misspelledWords.length;\r\n  const cTWord = metaData.correctTypedWords.length;\r\n  const totalCharactersTyped = cTCharacter + iTCharacter;\r\n  const speedWPM = Math.floor(cTCharacter / 5 / 1);\r\n  const accuracy = ((cTCharacter / totalCharactersTyped) * 100).toFixed(1);\r\n  showResults(speedWPM, accuracy, cTCharacter, cTWord, iTCharacter, iTWord);\r\n}\r\n\r\n// GETTING DATA FROM CALCULATE RESULTS AND UPDAING DATA OF DOM\r\nfunction showResults(speed, acr, cCharacters, cWords, iCharacters, iWords) {\r\n  getDomElement(\"#speed\").innerText = speed;\r\n  getDomElement(\"#accuracy\").innerText = acr + \"%\";\r\n  getDomElement(\"#correctCharaters\").innerText = cCharacters;\r\n  getDomElement(\"#correctWords\").innerText = cWords;\r\n  getDomElement(\"#incorrectCharaters\").innerText = iCharacters;\r\n  getDomElement(\"#incorrectwords\").innerText = iWords;\r\n}\r\n\r\nlet metaData = {\r\n  misspelledWords: [],\r\n  correctTypedWords: [],\r\n  clear() {\r\n    this.misspelledWords = [];\r\n    this.correctTypedWords = [];\r\n  },\r\n};\r\n\r\nfunction getNextWordIndex(word) {\r\n  return word.nextElementSibling.offsetLeft;\r\n}\r\n\r\nfunction getCurrentWord(index) {\r\n  const allWords = wordsElement.querySelectorAll(\"span\");\r\n  const currentWord = allWords[index];\r\n  return currentWord;\r\n}\r\n\r\nfunction bringNewLine() {\r\n  const transformTop = wordsElement.style\r\n    .getPropertyValue(\"--transformTop\")\r\n    .slice(0, -2);\r\n  wordsElement.style.setProperty(\r\n    \"--transformTop\",\r\n    `${-42 + Number(transformTop)}px`\r\n  );\r\n}\r\nclass TypeCheck {\r\n  constructor() {\r\n    this.input = getDomElement(\"#inputField\");\r\n    this.btn = getDomElement(\"#refresh\");\r\n    this.timerRunning = false;\r\n    this.timerTime = 0;\r\n    this.wordIndex = 0;\r\n    this.input.addEventListener(\"keyup\", this.keyUp);\r\n    this.input.addEventListener(\"keypress\", this.keyPress);\r\n    this.input.addEventListener(\"keydown\", this.runTimer);\r\n    this.btn.addEventListener(\"click\", this.refresh);\r\n  }\r\n\r\n  // CLEARING DATA AND DISABLING INPUT FIELD WHEN TIME END\r\n  clearAll() {\r\n    wordsElement.innerText = null;\r\n    this.input.value = null;\r\n    this.input.setAttribute(\"disabled\", \"true\");\r\n  }\r\n\r\n  // UPDAING TIME\r\n  updateTimer = () => {\r\n    const timerUpdate = setInterval(() => {\r\n      this.timerTime--;\r\n      timerElement.innerText = `00:${this.timerTime}`;\r\n      if (this.timerTime === 0) {\r\n        timerElement.innerText = \"00:00\";\r\n        clearInterval(timerUpdate);\r\n        this.clearAll();\r\n        calculateTypingResults();\r\n      }\r\n    }, 1000);\r\n  };\r\n\r\n  // To Start Timer When user start typing\r\n  runTimer = () => {\r\n    if (!this.timerRunning) {\r\n      this.timerTime = 59;\r\n      this.timerRunning = true;\r\n      this.updateTimer();\r\n    }\r\n  };\r\n\r\n  // HANDLING INPUT EVENT TO CALCUATE SPEED\r\n  keyPress = (e) => {\r\n    const currentWord = getCurrentWord(this.wordIndex);\r\n    const currentWordText = currentWord.innerText;\r\n\r\n    if (e.key === \" \") {\r\n      currentWord.classList.remove(\"highlight\");\r\n\r\n      if (currentWordText === this.input.value) {\r\n        currentWord.classList.remove(\"incorrect\");\r\n        currentWord.classList.add(\"correct\");\r\n        metaData.correctTypedWords.push(currentWordText);\r\n      } else if (currentWordText !== this.input.value) {\r\n        currentWord.classList.remove(\"correct\");\r\n        currentWord.classList.add(\"incorrect\");\r\n        metaData.misspelledWords.push(currentWordText);\r\n      }\r\n      //  To Bring Next Line UP\r\n      if (currentWord.offsetLeft > getNextWordIndex(currentWord)) {\r\n        bringNewLine();\r\n      }\r\n    }\r\n  };\r\n\r\n  keyUp = (e) => {\r\n    if (e.key === \" \") {\r\n      this.input.value = null;\r\n      this.wordIndex++;\r\n      getCurrentWord(this.wordIndex).classList.add(\"highlight\");\r\n      return;\r\n    }\r\n\r\n    const currentWord = getCurrentWord(this.wordIndex);\r\n    let inputFieldElementTypedValue = this.input.value.length;\r\n    let currentWordText = currentWord.innerText.slice(\r\n      0,\r\n      inputFieldElementTypedValue\r\n    );\r\n    if (currentWordText !== this.input.value.trim()) {\r\n      currentWord.classList.remove(\"correct\");\r\n      currentWord.classList.add(\"incorrect\");\r\n    } else {\r\n      currentWord.classList.remove(\"incorrect\");\r\n    }\r\n  };\r\n\r\n  // REFRESHING BUTTON RESETS ALL VALUE TO DEFAULT\r\n  refresh = () => {\r\n    wordsElement.innerText = null;\r\n    wordsElement.style.setProperty(\"--transformTop\", 0);\r\n    fetchContent(RANDOM_CONTENT_URL, updateWords);\r\n    this.timerRunning = false;\r\n    this.timerTime = 0;\r\n    timerElement.innerText = \"01:00\";\r\n    this.input.removeAttribute(\"disabled\");\r\n    this.input.value = null;\r\n    this.input.focus();\r\n    this.wordIndex = 0;\r\n    metaData.clear();\r\n  };\r\n}\r\n\r\nnew TypeCheck();\r\n"]}